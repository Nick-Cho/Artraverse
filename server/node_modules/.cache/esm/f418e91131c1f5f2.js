let User,hashPassword,comparePassword;_31c‍.x([["register",()=>register]]);_31c‍.w("../models/user",[["default",["User"],function(v){User=v}]]);_31c‍.w("../helpers/auth",[["hashPassword",["hashPassword"],function(v){hashPassword=v}],["comparePassword",["comparePassword"],function(v){comparePassword=v}]]);

       const register = (req,res)=>{
  //console.log('Register Endpoint =>', req.body)
  const {fname, lname, email, pswd, secret} = req.body;

  //validating that name and password fields have valid values
  if (!fname || !lname) return res.status(400).send('First name and last name are required');
  if (!pswd || pswd.length < 6)
   return res
   .status(400)
   .send('Must enter a password that has 6 or more characters');
  if (!secret) return res.status(400).send("This field is required");

  //Checking if user with the email entered already exists
  // const exist = User.findOne({"email": email});
  // if (exist) return res.status(400).send("Email is already registered!");

  //hashing password
  const hashedPswd = hashPassword(pswd);

  const user = new User({
    first_name: fname,
    last_name: lname,
    email: email,
    password: pswd,
    secret: secret,
  });
  try{
    user.save();
    _31c‍.g.console.log('Registered User:', user);
    return res.json({
      ok: true,
    })
  } catch (err) {
    _31c‍.g.console.log('Register Error:', err);
    return res.status(400).send('Error in creating new user')
  }
};